name: GIFT Framework v2 Binder Environment Test

on:
  push:
    branches: [ main ]
    paths: [ 'requirements.txt', 'runtime.txt', 'postBuild', 'gift_v2_notebook.ipynb' ]
  schedule:
    # Test Binder build weekly
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  workflow_dispatch:

jobs:
  test-binder:
    name: Binder Environment Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Binder Configuration
      run: |
        echo "Validating Binder configuration files..."
        
        # Check requirements.txt
        if [ -f "requirements.txt" ]; then
          echo "✅ requirements.txt found"
          echo "   Dependencies:"
          grep -E "^[a-zA-Z]" requirements.txt | head -5
        else
          echo "❌ requirements.txt missing"
          exit 1
        fi
        
        # Check runtime.txt
        if [ -f "runtime.txt" ]; then
          echo "✅ runtime.txt found"
          echo "   Python version: $(cat runtime.txt)"
        else
          echo "❌ runtime.txt missing"
          exit 1
        fi
        
        # Check postBuild
        if [ -f "postBuild" ]; then
          echo "✅ postBuild script found"
          echo "   Script size: $(wc -l < postBuild) lines"
        else
          echo "❌ postBuild script missing"
          exit 1
        fi
        
        # Check notebook exists
        if [ -f "gift_v2_notebook.ipynb" ]; then
          echo "✅ Main notebook found"
        else
          echo "❌ gift_v2_notebook.ipynb missing"
          exit 1
        fi
        
    - name: Validate Requirements Format
      run: |
        echo "Validating requirements.txt format..."
        
        python -c "
        import re
        import sys
        
        try:
            with open('requirements.txt', 'r') as f:
                lines = f.readlines()
            
            valid_packages = []
            invalid_lines = []
            
            for line_num, line in enumerate(lines, 1):
                line = line.strip()
                
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                
                # Check package format (basic validation)
                if re.match(r'^[a-zA-Z0-9_-]+.*$', line):
                    valid_packages.append(line)
                else:
                    invalid_lines.append((line_num, line))
            
            print(f'✅ Valid packages: {len(valid_packages)}')
            print(f'   Key packages: numpy, matplotlib, scipy, pandas, sympy')
            
            if invalid_lines:
                print(f'❌ Invalid lines found:')
                for line_num, line in invalid_lines:
                    print(f'   Line {line_num}: {line}')
                sys.exit(1)
            
            # Check for essential packages
            package_names = [pkg.split('>=')[0].split('==')[0] for pkg in valid_packages]
            essential = ['numpy', 'matplotlib', 'scipy', 'pandas', 'sympy', 'jupyter']
            
            missing = [pkg for pkg in essential if pkg not in package_names]
            if missing:
                print(f'❌ Missing essential packages: {missing}')
                sys.exit(1)
            
            print('✅ All essential packages present')
            
        except Exception as e:
            print(f'❌ Requirements validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Validate Runtime Configuration
      run: |
        echo "Validating runtime.txt..."
        
        python_version=$(cat runtime.txt)
        echo "Python version: $python_version"
        
        # Check if version format is correct
        if [[ $python_version =~ ^python-[0-9]+\.[0-9]+$ ]]; then
          echo "✅ Runtime format valid"
        else
          echo "❌ Invalid runtime format (expected: python-X.Y)"
          exit 1
        fi
        
        # Extract version number
        version_num=$(echo $python_version | sed 's/python-//')
        echo "Version number: $version_num"
        
        # Check if version is supported (3.8+)
        major=$(echo $version_num | cut -d. -f1)
        minor=$(echo $version_num | cut -d. -f2)
        
        if [ "$major" -eq 3 ] && [ "$minor" -ge 8 ]; then
          echo "✅ Python version supported (3.8+)"
        else
          echo "❌ Python version too old (need 3.8+)"
          exit 1
        fi
        
    - name: Test PostBuild Script
      run: |
        echo "Testing postBuild script..."
        
        # Make script executable
        chmod +x postBuild
        
        # Check script syntax
        bash -n postBuild
        if [ $? -eq 0 ]; then
          echo "✅ postBuild script syntax valid"
        else
          echo "❌ postBuild script syntax error"
          exit 1
        fi
        
        # Check for key elements
        if grep -q "GIFT Framework" postBuild; then
          echo "✅ Framework identification present"
        else
          echo "❌ Framework identification missing"
          exit 1
        fi
        
        if grep -q "jupyter nbextension enable" postBuild; then
          echo "✅ Jupyter widgets setup present"
        else
          echo "❌ Jupyter widgets setup missing"
          exit 1
        fi
        
        echo "✅ postBuild script validation passed"
        
    - name: Test Binder URL Generation
      run: |
        echo "Generating Binder URLs for testing..."
        
        # Generate Binder URL
        REPO_URL="https://github.com/bdelaf/gift"
        BINDER_URL="${REPO_URL}/v2/gh/bdelaf/gift/main?filepath=gift_v2_notebook.ipynb"
        
        echo "Repository: $REPO_URL"
        echo "Binder URL: $BINDER_URL"
        
        # Check if URL format is correct
        if [[ $BINDER_URL =~ https://mybinder.org/v2/gh/[^/]+/[^/]+/main ]]; then
          echo "✅ Binder URL format valid"
        else
          echo "❌ Binder URL format invalid"
          exit 1
        fi
        
        # Save URL for artifact
        echo "$BINDER_URL" > binder_url.txt
        
    - name: Upload Binder Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: binder-test-artifacts
        path: |
          requirements.txt
          runtime.txt
          postBuild
          binder_url.txt
        if-no-files-found: warn
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = `## GIFT Framework v2 Binder Environment Test
          
          ✅ **Configuration Files**: All present and valid
          ✅ **Requirements**: Essential packages included
          ✅ **Runtime**: Python 3.11+ configured
          ✅ **PostBuild**: Script syntax and setup validated
          ✅ **URL Generation**: Binder links formatted correctly
          
          **Binder Environment Ready**:
          - Dependencies: numpy, matplotlib, scipy, pandas, sympy, jupyter
          - Python version: 3.11+
          - Jupyter widgets: Enabled
          - Framework setup: Automated
          
          **Test URLs**:
          - [Binder Launch](https://mybinder.org/v2/gh/bdelaf/gift/main?filepath=gift_v2_notebook.ipynb)
          - [Direct Notebook](https://mybinder.org/v2/gh/bdelaf/gift/main?filepath=gift_v2_notebook.ipynb)
          
          **Status**: Ready for interactive execution
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
