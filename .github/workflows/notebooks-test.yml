name: Interactive Notebooks Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'legacy/docs/**/*.ipynb'
      - 'legacy/requirements.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'legacy/docs/**/*.ipynb'
      - 'legacy/requirements.txt'

env:
  PYTHON_VERSION: '3.9'

jobs:
  test-notebooks:
    name: Test Interactive Notebooks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        notebook:
          - legacy/docs_published/gift_tutorial_e8_to_sm.ipynb
          - legacy/docs/gift_support_notebook.ipynb
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r legacy/requirements.txt
        pip install nbconvert jupyter ipykernel
        
    - name: Test Notebook Execution
      run: |
        echo "üß™ Testing notebook: ${{ matrix.notebook }}"
        
        # Execute notebook and capture output
        jupyter nbconvert \
          --to notebook \
          --execute \
          --ExecutePreprocessor.timeout=300 \
          --ExecutePreprocessor.kernel_name=python3 \
          --output-dir=/tmp \
          --output=test_output.ipynb \
          "${{ matrix.notebook }}"
          
        echo "‚úÖ Notebook executed successfully"
        
    - name: Validate Notebook Outputs
      run: |
        echo "üîç Validating notebook outputs..."
        
        python -c "
        import json
        import sys
        
        # Load the executed notebook
        with open('/tmp/test_output.ipynb', 'r') as f:
            notebook = json.load(f)
            
        # Check for execution errors
        error_count = 0
        for cell in notebook['cells']:
            if cell['cell_type'] == 'code':
                outputs = cell.get('outputs', [])
                for output in outputs:
                    if output['output_type'] == 'error':
                        error_count += 1
                        print(f'‚ùå Error in cell: {output[\"ename\"]}: {output[\"evalue\"]}')
                        
        if error_count > 0:
            print(f'‚ùå Found {error_count} execution errors')
            sys.exit(1)
        else:
            print('‚úÖ No execution errors found')
        "
        
    - name: Test Binder Compatibility
      run: |
        echo "üîó Testing Binder compatibility..."
        
        # Check if requirements.txt exists and is valid
        if [ -f "legacy/requirements.txt" ]; then
          echo "‚úÖ requirements.txt found"
          
          # Test if requirements can be installed
          pip install --dry-run -r legacy/requirements.txt
          echo "‚úÖ Requirements are Binder-compatible"
        else:
          echo "‚ùå requirements.txt not found"
          exit 1
          
        # Check if runtime.txt exists (optional)
        if [ -f "legacy/runtime.txt" ]; then
          echo "‚úÖ runtime.txt found"
        fi
        
    - name: Test Colab Compatibility
      run: |
        echo "üöÄ Testing Colab compatibility..."
        
        python -c "
        import json
        
        # Check notebook for Colab-specific requirements
        with open('${{ matrix.notebook }}', 'r') as f:
            notebook = json.load(f)
            
        # Look for Google Colab specific imports
        colab_imports = []
        for cell in notebook['cells']:
            if cell['cell_type'] == 'code':
                source = ''.join(cell['source'])
                if 'google.colab' in source:
                    colab_imports.append('google.colab')
                if '!pip install' in source:
                    colab_imports.append('pip install')
                    
        if colab_imports:
            print(f'‚úÖ Found Colab-specific features: {colab_imports}')
        else:
            print('‚ÑπÔ∏è  No Colab-specific features found (this is fine)')
        "
        
    - name: Generate Notebook Report
      run: |
        echo "üìä Generating notebook test report..."
        
        python -c "
        import json
        import os
        from datetime import datetime
        
        # Load notebook metadata
        with open('${{ matrix.notebook }}', 'r') as f:
            notebook = json.load(f)
            
        # Extract metadata
        metadata = notebook.get('metadata', {})
        kernel_info = metadata.get('kernelspec', {})
        
        # Count cells
        cell_counts = {
            'code': len([c for c in notebook['cells'] if c['cell_type'] == 'code']),
            'markdown': len([c for c in notebook['cells'] if c['cell_type'] == 'markdown']),
            'raw': len([c for c in notebook['cells'] if c['cell_type'] == 'raw'])
        }
        
        # Generate report
        report = {
            'timestamp': datetime.now().isoformat(),
            'notebook': '${{ matrix.notebook }}',
            'status': 'PASSED',
            'kernel': kernel_info.get('display_name', 'Unknown'),
            'cell_counts': cell_counts,
            'total_cells': sum(cell_counts.values()),
            'has_outputs': any('outputs' in cell for cell in notebook['cells']),
            'binder_compatible': os.path.exists('legacy/requirements.txt'),
            'colab_compatible': True  # Assume compatible if no errors
        }
        
        print('üìà Notebook Test Report:')
        print(f'  Notebook: {report[\"notebook\"]}')
        print(f'  Status: {report[\"status\"]}')
        print(f'  Kernel: {report[\"kernel\"]}')
        print(f'  Total Cells: {report[\"total_cells\"]}')
        print(f'  Code Cells: {report[\"cell_counts\"][\"code\"]}')
        print(f'  Markdown Cells: {report[\"cell_counts\"][\"markdown\"]}')
        print(f'  Binder Compatible: {report[\"binder_compatible\"]}')
        print(f'  Colab Compatible: {report[\"colab_compatible\"]}')
        
        # Save report
        os.makedirs('.github/notebook-reports', exist_ok=True)
        report_file = f'.github/notebook-reports/{os.path.basename(\"${{ matrix.notebook }}\")}.json'
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
            
        print(f'‚úÖ Report saved to {report_file}')
        "
        
    - name: Upload Notebook Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: notebook-reports-${{ matrix.notebook }}
        path: .github/notebook-reports/
        
  validate-badges:
    name: Validate Badge Links
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Colab Badge
      run: |
        echo "üîó Validating Colab badge..."
        
        # Check if README contains Colab badge
        if grep -q "colab.research.google.com" README.md; then
          echo "‚úÖ Colab badge found in README"
        else:
          echo "‚ùå Colab badge not found in README"
          exit 1
          
    - name: Validate Binder Badge
      run: |
        echo "üîó Validating Binder badge..."
        
        # Check if README contains Binder badge
        if grep -q "mybinder.org" README.md; then
          echo "‚úÖ Binder badge found in README"
        else:
          echo "‚ùå Binder badge not found in README"
          exit 1
          
    - name: Test Badge URLs
      run: |
        echo "üåê Testing badge URLs..."
        
        # Extract badge URLs from README
        colab_url=$(grep -o 'https://colab.research.google.com/[^)]*' README.md | head -1)
        binder_url=$(grep -o 'https://mybinder.org/[^)]*' README.md | head -1)
        
        echo "Colab URL: $colab_url"
        echo "Binder URL: $binder_url"
        
        # Test if URLs are accessible (basic check)
        if [ -n "$colab_url" ]; then
          echo "‚úÖ Colab URL extracted: $colab_url"
        else:
          echo "‚ùå Could not extract Colab URL"
          exit 1
          
        if [ -n "$binder_url" ]; then
          echo "‚úÖ Binder URL extracted: $binder_url"
        else:
          echo "‚ùå Could not extract Binder URL"
          exit 1
